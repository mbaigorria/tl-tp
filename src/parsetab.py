
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'DD00CAA2120DC6087D4E6EA3B5B77C4F'
    
_lr_action_items = {'RPAREN':([12,13,24,35,38,],[-13,-12,-15,38,-14,]),'STRING':([8,10,15,17,25,29,],[12,12,12,12,12,12,]),'SEMICOLON':([32,33,34,36,],[37,-10,-11,39,]),'EQUALS':([5,9,],[8,17,]),'NUMBER':([8,10,15,17,25,28,29,31,],[13,13,13,13,13,34,13,34,]),'LBRACKET':([8,10,15,17,25,29,],[10,10,10,10,10,10,]),'COMMA':([4,11,12,13,16,18,19,22,23,24,26,30,38,],[6,-4,-13,-12,-6,-16,25,29,-5,-15,-7,-17,-14,]),'LPAREN':([8,10,15,17,25,29,],[15,15,15,15,15,15,]),'QUOTATION_MARK':([8,17,20,37,39,],[14,14,26,-8,-9,]),'COLON':([21,27,],[28,31,]),'RBRACKET':([12,13,18,19,24,30,38,],[-13,-12,-16,24,-15,-17,-14,]),'ID':([0,3,4,6,11,12,13,14,16,20,23,24,26,28,31,37,38,39,],[3,5,3,9,-4,-13,-12,21,-6,27,-5,-15,-7,33,33,-8,-14,-9,]),'$end':([0,1,2,4,7,11,12,13,16,23,24,26,38,],[-3,0,-1,-3,-2,-4,-13,-12,-6,-5,-15,-7,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'style_var':([28,31,],[32,36,]),'type_value':([8,17,],[11,23,]),'argl_style':([14,],[20,]),'start':([0,],[1,]),'argument_list':([3,],[4,]),'variable':([8,10,15,17,25,29,],[16,18,22,16,30,35,]),'expression':([0,4,],[2,7,]),'variable_list':([10,],[19,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> expression','start',1,'p_start','parser.py',19),
  ('expression -> ID argument_list expression','expression',3,'p_expression','parser.py',23),
  ('expression -> <empty>','expression',0,'p_expression_empty','parser.py',27),
  ('argument_list -> ID EQUALS type_value','argument_list',3,'p_argument_list_single','parser.py',31),
  ('argument_list -> argument_list COMMA ID EQUALS type_value','argument_list',5,'p_argument_list_append','parser.py',35),
  ('type_value -> variable','type_value',1,'p_type_value','parser.py',39),
  ('type_value -> QUOTATION_MARK argl_style QUOTATION_MARK','type_value',3,'p_type_value_style','parser.py',43),
  ('argl_style -> ID COLON style_var SEMICOLON','argl_style',4,'p_argument_list_style_single','parser.py',47),
  ('argl_style -> argl_style ID COLON style_var SEMICOLON','argl_style',5,'p_argument_list_style_append','parser.py',51),
  ('style_var -> ID','style_var',1,'p_argl_style_string','parser.py',55),
  ('style_var -> NUMBER','style_var',1,'p_argl_style_num','parser.py',59),
  ('variable -> NUMBER','variable',1,'p_variable_number','parser.py',63),
  ('variable -> STRING','variable',1,'p_variable_string','parser.py',67),
  ('variable -> LPAREN variable COMMA variable RPAREN','variable',5,'p_variable_point','parser.py',71),
  ('variable -> LBRACKET variable_list RBRACKET','variable',3,'p_variable_array','parser.py',75),
  ('variable_list -> variable','variable_list',1,'p_variable_list_one','parser.py',79),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list_append','parser.py',83),
]
